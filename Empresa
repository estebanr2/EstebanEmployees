from abc import ABC, abstractmethod

class AbstractEmployee(ABC):
    new_id = 1

    def __init__(self):
        self.id = AbstractEmployee.new_id
        AbstractEmployee.new_id += 1

    @abstractmethod
    def say_id(self):
        pass

class Employee(AbstractEmployee):
    new_id = 1

    def __init__(self, name=None):
        super().__init__()
        self.__company = "Una empresa esclavizante"
        self._name = name

    def say_id(self):
        print("My id is", self.id)

    def get_name(self):
        return self._name

    def set_name(self, name):
        self._name = name

    def del_name(self):
        del self._name

class User:
    def __init__(self, username, role):
        self.username = username
        self.role = role

    def say_user_info(self):
        print("Username:", self.username)
        print("Role:", self.role)

class Admin(Employee, User):
    def __init__(self, name=None):
        super().__init__(name)
        User.__init__(self, self.id, "Admin")
    
    def say_id(self):
        super().say_id()
        print("I am an Admin")

class Manager(Admin):
    def say_id(self):
        print("I am in charge.")
        super().say_id()

class Meeting:
    def __init__(self):
        self.attendees = []

    def __add__(self, other):
        self.attendees.append(other)
        print("Employee with ID",other.id,"added successfully  ")
        return self

    def __len__(self):
        return len(self.attendees)


# CÃ³digo para probar
e1 = Employee()
e2 = Employee()
e3 = Admin("Rowald")
e4 = Manager("Mikheltodd")

m1 = Meeting()
m1 + e1
m1 + e2
m1 + e3
m1 + e4
print(f"# Attendees to the meeting: {len(m1)}")
e1.set_name("Ryan")
for e in m1.attendees:
    print(f"\nMy name is {e.get_name()} and I work for {e._Employee__company}")
    e.say_id()
    try:
        e.say_user_info()
    except AttributeError:
        continue

e1.del_name()
